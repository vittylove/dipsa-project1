<link rel="stylesheet" href="~/css/Backstyle.css" />

@{
    bool count = (bool)ViewData["count"];

    string[] images = (string[])ViewData["images"];
    string[] names = (string[])ViewData["names"];
    string[] informations = (string[])ViewData["informations"];
    double[] prices = (double[])ViewData["prices"];
    int[] quentity = (int[])ViewData["quantity"];
    string total = (string)ViewData["total"];
    string[] productId = (string[])ViewData["productId"];

}

@section Scripts{
    <script src="~/js/history/checkout.js"></script>
    <script src="~/js/shoppingcart/AddToCart.js"></script>
    <script>
const baseRequest = {
  apiVersion: 2,
  apiVersionMinor: 0
};
const allowedCardNetworks = ["AMEX", "DISCOVER", "JCB", "MASTERCARD", "VISA"];
const allowedCardAuthMethods = ["PAN_ONLY", "CRYPTOGRAM_3DS"];
const tokenizationSpecification = {
  type: 'PAYMENT_GATEWAY',
  parameters: {
    'gateway': 'example',
    'gatewayMerchantId': 'exampleGatewayMerchantId'
  }
};
const baseCardPaymentMethod = {
  type: 'CARD',
  parameters: {
    allowedAuthMethods: allowedCardAuthMethods,
    allowedCardNetworks: allowedCardNetworks
  }
};
const cardPaymentMethod = Object.assign(
  {},
  baseCardPaymentMethod,
  {
    tokenizationSpecification: tokenizationSpecification
  }
);
let paymentsClient = null;
function getGoogleIsReadyToPayRequest() {
  return Object.assign(
      {},
      baseRequest,
      {
        allowedPaymentMethods: [baseCardPaymentMethod]
      }
  );
}
function getGooglePaymentDataRequest() {
  const paymentDataRequest = Object.assign({}, baseRequest);
  paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];
  paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
  paymentDataRequest.merchantInfo = {

    // merchantId: '12345678901234567890',
    merchantName: 'The T9 Store'
  };
  paymentDataRequest.callbackIntents = ["SHIPPING_ADDRESS",  "SHIPPING_OPTION", "PAYMENT_AUTHORIZATION"];
  paymentDataRequest.shippingAddressRequired = true;
  paymentDataRequest.shippingAddressParameters = getGoogleShippingAddressParameters();
  paymentDataRequest.shippingOptionRequired = true;
  return paymentDataRequest;
}
function getGooglePaymentsClient() {
  if ( paymentsClient === null ) {
    paymentsClient = new google.payments.api.PaymentsClient({
      environment: "TEST",
      merchantInfo: {
        merchantName: "Merchant Team 9",
        merchantId: "01234567890123456789"
      },
      paymentDataCallbacks: {
        onPaymentAuthorized: onPaymentAuthorized,
        onPaymentDataChanged: onPaymentDataChanged
      }
    });
  }
  return paymentsClient;
}
function onPaymentAuthorized(paymentData) {
        return new Promise(function(resolve, reject){
  // handle the response
  processPayment(paymentData)
    .then(function() {
      resolve({transactionState: 'SUCCESS'});
    })
    .catch(function() {
        resolve({
        transactionState: 'ERROR',
        error: {
          intent: 'PAYMENT_AUTHORIZATION',
          message: 'Insufficient funds',
          reason: 'PAYMENT_DATA_INVALID'
        }
      });
    });
  });
}
function onPaymentDataChanged(intermediatePaymentData) {
  return new Promise(function(resolve, reject) {
        let shippingAddress = intermediatePaymentData.shippingAddress;
    let shippingOptionData = intermediatePaymentData.shippingOptionData;
    let paymentDataRequestUpdate = {};
    if (intermediatePaymentData.callbackTrigger == "INITIALIZE" || intermediatePaymentData.callbackTrigger == "SHIPPING_ADDRESS") {
      if(shippingAddress.administrativeArea == "NJ")  {
        paymentDataRequestUpdate.error = getGoogleUnserviceableAddressError();
      }
      else {
        paymentDataRequestUpdate.newShippingOptionParameters = getGoogleDefaultShippingOptions();
        let selectedShippingOptionId = paymentDataRequestUpdate.newShippingOptionParameters.defaultSelectedOptionId;
        paymentDataRequestUpdate.newTransactionInfo = calculateNewTransactionInfo(selectedShippingOptionId);
      }
    }
    else if (intermediatePaymentData.callbackTrigger == "SHIPPING_OPTION") {
      paymentDataRequestUpdate.newTransactionInfo = calculateNewTransactionInfo(shippingOptionData.id);
    }
    resolve(paymentDataRequestUpdate);
  });
}
function calculateNewTransactionInfo(shippingOptionId) {
        let newTransactionInfo = getGoogleTransactionInfo();
  let shippingCost = getShippingCosts()[shippingOptionId];
  newTransactionInfo.displayItems.push({
    type: "LINE_ITEM",
    label: "Shipping cost",
    price: shippingCost,
    status: "FINAL"
  });
  let totalPrice = 0.00;
  newTransactionInfo.displayItems.forEach(displayItem => totalPrice += parseFloat(displayItem.price));
  newTransactionInfo.totalPrice = totalPrice.toString();
  return newTransactionInfo;
}
function onGooglePayLoaded() {
  const paymentsClient = getGooglePaymentsClient();
  paymentsClient.isReadyToPay(getGoogleIsReadyToPayRequest())
      .then(function(response) {
        if (response.result) {
          addGooglePayButton();

        }
      })
      .catch(function(err) {
        // show error in developer console for debugging
        console.error(err);
      });
}
function addGooglePayButton() {
  const paymentsClient = getGooglePaymentsClient();
  const button =
      paymentsClient.createButton({onClick: onGooglePaymentButtonClicked});
  document.getElementById('container').appendChild(button);
}
function getGoogleTransactionInfo() {
  return {
        displayItems: [
        {
          label: "Subtotal",
          type: "SUBTOTAL",
          price: "45.50",
        },
      {
          label: "Tax",
          type: "TAX",
          price: "0.00",
        }
    ],
    countryCode: 'US',
    currencyCode: "USD",
    totalPriceStatus: "FINAL",
    totalPrice: "45.50",
    totalPriceLabel: "Total"
  };
}
/**
 * Provide a key value store for shippping options.
 */
function getShippingCosts() {
        return {
    "shipping-001": "0.00",
    "shipping-002": "1.99",
    "shipping-003": "10.00"
  }
}
function getGoogleShippingAddressParameters() {
        return  {
        allowedCountryCodes: ['US'],
    phoneNumberRequired: true
  };
}
function getGoogleDefaultShippingOptions() {
        return {
      defaultSelectedOptionId: "shipping-001",
      shippingOptions: [
        {
          "id": "shipping-001",
          "label": "Free: Standard shipping",
          "description": "Free Shipping delivered in 5 business days."
        },
        {
          "id": "shipping-002",
          "label": "$1.99: Standard shipping",
          "description": "Standard shipping delivered in 3 business days."
        },
        {
          "id": "shipping-003",
          "label": "$10: Express shipping",
          "description": "Express shipping delivered in 1 business day."
        },
      ]
  };
}
function getGoogleUnserviceableAddressError() {
        return {
    reason: "SHIPPING_ADDRESS_UNSERVICEABLE",
    message: "Cannot ship to the selected address",
    intent: "SHIPPING_ADDRESS"
        };
}
function prefetchGooglePaymentData() {
  const paymentDataRequest = getGooglePaymentDataRequest();
  // transactionInfo must be set but does not affect cache
  paymentDataRequest.transactionInfo = {
    totalPriceStatus: 'NOT_CURRENTLY_KNOWN',
    currencyCode: 'USD'
  };
  const paymentsClient = getGooglePaymentsClient();
  paymentsClient.prefetchPaymentData(paymentDataRequest);
}
function onGooglePaymentButtonClicked() {
  const paymentDataRequest = getGooglePaymentDataRequest();
  paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
  const paymentsClient = getGooglePaymentsClient();
  paymentsClient.loadPaymentData(paymentDataRequest);
}
function processPayment(paymentData) {
        return new Promise(function(resolve, reject) {
        setTimeout(function() {
        // show returned data in developer console for debugging
         console.log(paymentData);

                paymentToken = paymentData.paymentMethodData.tokenizationData.token;
        resolve({});
        }, 3000);
            CheckOut();
  });
}</script>
    <script async
            src="https://pay.google.com/gp/p/js/pay.js"
            onload="onGooglePayLoaded()"></script>
}


@if (count == false)
{
    <h1>Your bag is empty.</h1>
    <HR />
}
else
{
    <h1>Review your bag.</h1>
    <p><b>Free delivery and free returns.</b></p>
            <div style="padding:2px; font-size:25px" align="right">Total &emsp; <span class="total"><b>$@total &emsp; &emsp;</b></span></div>
        @for (int i = 0; i < images.Length; i++)
        {
            <div id="table_@productId[i]">
            <table>
            <tr>
                <td width="20%" align="center">
                    <img SRC=@images[i] height="100" width="175">
                </td>
                <td align="center" width="20%">
                    <p style="font-size:large;font-weight:800">@names[i]</p>
                </td>
                <td align="center" width="30%">
                    <button class="button button_minus" productId=@productId[i]><img src="~/img/Sub.jpg" height="20" width="20"></button>
                    &emsp;<span id="quantity_@productId[i]">@quentity[i]</span>&emsp;
                    <button class="button button_plus" productId=@productId[i]><img src="~/img/Add.jpg" height="20" width="20" /></button>
                </td>
                <td align="center" width="15%">
                    $@prices[i].ToString("0.00") per item
                </td>
                <td align="center" width="15%">
                    <button class="button button_remove" productId=@productId[i]>Remove</button>
                </td>
            </tr>
            <tr>
                <td></td>
                <td colspan="4">
                    @informations[i]
            </td>
        </tr>
        <tr style="height:30px" >
            <td colspan="5"><hr /></td>
        </tr>
        </table>
    </div>
        }
    <table>
        <tr>
            <td width="200" rowspan="2"></td>
            <td>Subtotal &emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<span class="total">$@total</span></td>
        </tr>
        <tr>
            <td>Shipping&emsp; &emsp;&emsp;&emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;FREE</td>
    </table>
    <div id='t-warp2'>
        <HR />
    </div>
    <table>
        <tr>
            <td width="200" rowspan="2"></td>
            <th>Total &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<span class="total">$@total </span></th>
        </tr>
    </table>
    <br />
    <br />
    <div id='t-warp3'>
        <h6 id="quantity_error" style="color:red; font-weight:bold"></h6>
        <table>
            <tr>
                <td>
                    <div align="center"><button class="button1" id="button_checkout"><b>Check Out</b></button></div>
                    <br />
                    <div id="container"></div>
                </td>
            </tr>
        </table>
    </div>
}